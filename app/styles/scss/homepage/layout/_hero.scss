@use "sass:map";
@use "colors" as *;
@use "settings" as *;

$columns-at-xl: true;

.hero {
  display: grid;
  grid-template-columns: 1fr;
  column-gap: var(#{$css-var-prefix}homepage-spacing-horizontal);
  row-gap: calc(var(#{$css-var-prefix}homepage-spacing-vertical) / 2);
  justify-items: center;
  padding-top: var(#{$css-var-prefix}homepage-spacing-vertical);

  @if $columns-at-xl {
    @media (min-width: map.get(map.get($breakpoints, "xl"), "breakpoint")) {
      grid-template-columns: 6fr 5fr;
      align-items: center;
      margin: 0 auto;

      .demo {
        justify-content: center;
        transform: translateY(calc(var(#{$css-var-prefix}spacing) * -1.5));
      }
    }

    @media (min-width: map.get(map.get($breakpoints, "xl"), "breakpoint")) {
      grid-template-columns: 7fr 5fr;
    }
  }

  .demo,
  .hook {
    width: 100%;

    @media (min-width: map.get(map.get($breakpoints, "md"), "breakpoint")) {
      max-width: map.get(map.get($breakpoints, "md"), "viewport");
    }

    @if $columns-at-xl {
      @media (min-width: map.get(map.get($breakpoints, "xl"), "breakpoint")) {
        max-width: none;
      }
    } @else {
      @media (min-width: map.get(map.get($breakpoints, "xl"), "breakpoint")) {
        max-width: map.get(map.get($breakpoints, "lg"), "viewport");
      }
    }
  }

  .hook {
    z-index: 1;
    position: relative;

    h1,
    p {
      @media (min-width: map.get(map.get($breakpoints, "sm"), "breakpoint")) {
        text-align: center;
      }

      @if $columns-at-xl {
        @media (min-width: map.get(map.get($breakpoints, "xl"), "breakpoint")) {
          text-align: left;
        }
      }
    }

    h1 {
      margin-bottom: calc(var(#{$css-var-prefix}homepage-spacing-vertical) / 2);

      mark {
        padding: 0;
        background-image: var(#{$css-var-prefix}mark-gradient);
        background-clip: text;
        color: transparent;
      }
    }

    .grid.ctas {
      margin-top: calc(var(#{$css-var-prefix}homepage-spacing-vertical) / 2);
      margin-bottom: calc(var(#{$css-var-prefix}spacing) * 0.5);

      @media (min-width: map.get(map.get($breakpoints, "sm"), "breakpoint")) {
        display: flex;
        justify-content: center;
      }

      @if $columns-at-xl {
        @media (min-width: map.get(map.get($breakpoints, "xl"), "breakpoint")) {
          justify-content: flex-start;
        }
      }
    }

    p.info,
    p.secondary {
      color: var(#{$css-var-prefix}muted-color);
    }
  }
}
